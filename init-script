#!/bin/sh
#
# Hybris adaptation bootstrapping initramfs init script.
#
# Copyright (c) 2013 Tom Swindell <t.swindell@rubyx.co.uk>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
#
# Authors:
#   - Tom Swindell <t.swindell@rubyx.co.uk>
#
CUSTOMPRODUCT="Boat Loader"
BOOTLOGO=%BOOTLOGO%
NEVERBOOT=%NEVERBOOT%
ALWAYSDEBUG=%ALWAYSDEBUG%

get_opt() {
  for param in $(cat /proc/cmdline); do
    echo "$param" | grep "^$1=*" | cut -d'=' -f2
  done
}

write() {
  /bin/echo -n "$2" > "$1"
}

usb_net() {
  LOCAL_IP=192.168.2.1
  ANDROID_USB=/sys/class/android_usb/android0

  case "$1" in
    start)
      # During debug we export mmc too
      echo /dev/mmcblk0 > /sys/class/android_usb/f_mass_storage/lun0/file

      write $ANDROID_USB/enable        0
      write $ANDROID_USB/idVendor      18D1
      write $ANDROID_USB/idProduct     D001
      write $ANDROID_USB/iManufacturer "Mer"
      write $ANDROID_USB/iProduct      "$CUSTOMPRODUCT"
      write $ANDROID_USB/iSerial       "Mer Debug setting up"
      write $ANDROID_USB/functions     rndis,mass_storage
      write $ANDROID_USB/enable        1

      sleep 2

      USB_IFACE=notfound

      /bin/ifconfig usb0   $LOCAL_IP && USB_IFACE=usb0
      /bin/ifconfig rndis0 $LOCAL_IP && USB_IFACE=rndis0

      # Unable to set up USB interface? Reboot. 
      if [ x$USB_IFACE = xnotfound ]; then
	  write $ANDROID_USB/iSerial       "Mer Debug: ERROR: could not setup USB as usb0 or rndis0"
	  sleep 900
	  reboot -f
      fi 
      write $ANDROID_USB/iSerial       "Mer Debug telnet on port 23 on $USB_IFACE $LOCAL_IP - also running udhcpd"

      /bin/echo "interface $USB_IFACE" >> /etc/udhcpd.conf

      udhcpd
      telnetd -p 23 -l /bin/sh -F
      # User has been into debug and killed telnet, hoping for boot to continue
      write $ANDROID_USB/enable        0
      echo "" > /sys/class/android_usb/f_mass_storage/lun0/file
      write $ANDROID_USB/functions     rndis
      write $ANDROID_USB/iSerial       $(grep 'Serial' /proc/cpuinfo | awk '{print $3}')
      write $ANDROID_USB/iProduct      "Post-debug boot"
      write $ANDROID_USB/enable        1
      ;;

    stop)
      write $ANDROID_USB/enable 0
      ;;
  esac
}

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

/bin/busybox --install -s

mkdir /dev
mount -t tmpfs tmpfs /dev

mkdir /dev/pts
mkdir /proc
mkdir /sys

mount -a
ln -s /proc/mounts /etc/mtab

echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s

sleep 2

if [ x$BOOTLOGO = x1 ]; then
	zcat /bootsplash.gz > /dev/fb0
fi

if [ ! -e /proc/config.gz ]; then
	echo "No /proc/config.gz. Enable CONFIG_IKCONFIG and CONFIG_IKCONFIG_PROC" >> /diagnosis.log
else
	# Must be =y
	for x in CONFIG_CGROUPS CONFIG_AUTOFS4_FS CONFIG_DEVTMPFS_MOUNT CONFIG_DEVTMPFS CONFIG_UNIX CONFIG_HOTPLUG CONFIG_INOTIFY_USER CONFIG_SYSVIPC CONFIG_NET CONFIG_PROC_FS CONFIG_SIGNALFD CONFIG_SYSFS CONFIG_TMPFS_POSIX_ACL CONFIG_VT; do
		zcat /proc/config.gz | grep -E "^$x=y\$" || echo "$x=y not found in /proc/config.gz" >> /diagnosis.log
 	done
	# Must not be =y
	for x in CONFIG_ANDROID_LOW_MEMORY_KILLER CONFIG_ANDROID_PARANOID_NETWORK CONFIG_DUMMY CONFIG_SYSFS_DEPRECATED; do
		zcat /proc/config.gz | grep -E "^$x=y\$" && echo "$x=y found in /proc/config.gz, must be disabled" >> /diagnosis.log
	done
fi

if [ -e /diagnosis.log ]; then
	CUSTOMPRODUCT="Refusing to boot. See_diagnosis.log"
	usb_net start
	sleep 900
	reboot -f
fi

if [ x$NEVERBOOT = x1 ]; then
	CUSTOMPRODUCT="Set to never boot"
	usb_net start
	sleep 3600
	reboot -f
fi

if [ x$ALWAYSDEBUG = x1 ]; then
	CUSTOMPRODUCT="Always debug"
	usb_net start
fi

DATA_PARTITION=%DATA_PART%

if [ ! -z $DATA_PARTITION ]; then
  mkdir /data
  mkdir /target

  mount $DATA_PARTITION /data
  mount --bind /data/.stowaways/sffe /target
fi

# Check for special bootmode flags and process accordingly.
case "$(get_opt bootmode)" in
  debug)
    usb_net start
    ;;

  *)
    if [ -f "/target/init-debug" ]; then
      exec switch_root /target /init-debug &> /target/init-debug-stderrout
    else
      if [ -e "/target/sbin/init" ]; then
	      exec switch_root /target /sbin/init --log-level=debug --log-target=kmsg &> /target/init-stderrout
      fi
    fi
    CUSTOMPRODUCT="Failed to boot"
    usb_net start
    ;;
esac

sleep 3600
